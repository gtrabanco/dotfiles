#!/usr/bin/env bash

set -euo pipefail

[[ -z "$DOTLY_PATH" ]] && exit 1

. "$DOTLY_PATH/scripts/core/_main.sh"

##? Delete gnupg expired keys
##? 
##?
##? Usage:
##?   delete_expired [-h | --help]
##?   delete_expired [-v | --version]
##?
##? Options:
##?   -h --help     Show this help
##?   -v --version  Show the program version
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.com>
docs::parse "$@"

SCRIPT_NAME="dot gpg delete_expired"
SCRIPT_VERSION="1.0.0"

# Print name and version
if ${version:-}; then
  output::write "$SCRIPT_NAME v$SCRIPT_VERSION"
  exit
fi

# Determine which gpg binary
GPG_BIN="$(which gpg)"
[[ ! -f "$GPG_BIN" ]] && GPG_BIN="$(which gpg2)"
[[ ! -f "$GPG_BIN" ]] &&\
  output::error "GPG Was not detected" &&\
  exit 1

# Expired keys

output::empty_line

output::header "Delete expired public keys"

for pkey in $("$GPG_BIN" --list-keys --keyid-format LONG | grep "expired" | grep "pub" | tr '/' ' ' | awk '{print $3}'); do
  [[ -z "$pkey" ]] && continue
  "$GPG_BIN" --list-keys --keyid-format LONG "$pkey"
  output::yesno "Do you want to delete the key '$pkey'?" &&\
    { "$GPG_BIN" --delete-keys "$pkey" || true; }

  output::empty_line
done

output::empty_line


output::header "Delete expired private keys"

for key in $("$GPG_BIN" --list-secret-keys --keyid-format LONG | grep "expired" | grep "sec" | tr '/' ' ' | awk '{print $3}'); do
  [[ -z "$key" ]] && continue
  "$GPG_BIN" --list-keys --keyid-format LONG "$key"
  output::yesno "Do you want to delete it?" &&\
    { "$GPG_BIN" --delete-secret-keys "$key" || true; }

  output::empty_line
done
