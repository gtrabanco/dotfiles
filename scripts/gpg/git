#!/usr/bin/env bash

set -euo pipefail

if [[ -z "${SLOTH_PATH:-}" ]]; then
  cat <<EOF
  .Sloth required:
    https://github.com/gtrabanco/dotSloth

  bash <(curl -s https://raw.githubusercontent.com/gtrabanco/dotSloth/HEAD/installer)
EOF
  exit 1
fi

#shellcheck disable=SC1091
. "${SLOTH_PATH:-}/scripts/core/src/_main.sh"
dot::load_library "sec.sh"

sec::delete_line() {
  [[ $# -gt 1 && -f "$2" ]] && sec::sed -i "/^${1}/d" "${2}" && return $?
  return 1
}

pinentry_config() {
  script::depends_on pinentry-mac

  touch "${gnu_path}/gpg-agent.conf"
  sec::delete_line "default-cache-ttl" "${gnu_path}/gpg-agent.conf"
  sec::delete_line "max-cache-ttl" "${gnu_path}/gpg-agent.conf"
  sec::delete_line "pinentry-program" "${gnu_path}/gpg-agent.conf"
  echo "pinentry-program $(which pinentry-mac)" >>"${gnu_path}/gpg-agent.conf"
  gpgconf --kill all
}

gpg_suite_config() {
  if
    ! package::is_installed gpg-suite &>/dev/null
  then
    script::depends_on gpg-suite-no-mail
  fi

  touch "${gnu_path}/gpg-agent.conf"
  if ! grep -q "^default-cache-ttl" "${gnu_path}/gpg-agent.conf"; then
    echo "default-cache-ttl 600" >>"${gnu_path}/gpg-agent.conf"
  fi

  if ! grep -q "^max-cache-ttl" "${gnu_path}/gpg-agent.conf"; then
    echo "max-cache-ttl 7200" >>"${gnu_path}/gpg-agent.conf"
  fi

  sec::delete_line "pinentry-program" "${gnu_path}/gpg-agent.conf"
  echo "pinentry-program /usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac" | tee -a "${gnu_path}/gpg-agent.conf" &>/dev/null
  gpgconf --kill all

  output::write "Now the GPG Preferences will be opened and mark the options:"
  output::list "\`Store in macOS Keychain\`" "\`Remember for 600 seconds\`"
  open -b com.apple.systempreferences "/Library/PreferencePanes/GPGPreferences.prefPane"
}

gpg_suite_pinentry() {
  script::depends_on gpg-suite-pinentry

  sec::delete_line "pinentry-program" "${gnu_path}/gpg-agent.conf"
  echo "pinentry-program /usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac" | tee -a "${gnu_path}/gpg-agent.conf"
  gpgconf --kill all
}

uninstall_gpg_suite_if_needed() {
  if package::is_installed gpg-suite &>/dev/null; then
    output::answer "gpg-suite is installed. Uninstalling..."
    package::uninstall gpg-suite
  fi
}

uninstall_gpg_suite_no_mail_if_needed() {
  if package::is_installed gpg-suite-no-mail &>/dev/null; then
    output::answer "gpg-suite-no-mail is installed. Uninstalling..."
    package::uninstall gpg-suite-no-mail
  fi
}

uninstall_pinentry_mac_if_needed() {
  if package::is_installed pinentry-mac &>/dev/null; then
    output::answer "pinentry-mac is installed. Uninstalling..."
    package::uninstall pinentry-mac
  fi
}

uninstall_gpg_suite_pinentry_if_needed() {
  if package::is_installed gpg-suite-pinentry &>/dev/null; then
    output::answer "gpg-suite-pinentry is installed. Uninstalling..."
    package::uninstall gpg-suite-pinentry
  fi
}

##? Configure git and github to sign commits
##?
##?
##? Usage:
##?   git [-h | --help]
##?   git [-v | --version]
##?   git [--gnupg-home <gnupg_path>] [[-p | --pinentry]|[-g | --gpg-suite]|[-s | --gpg-suite-pinentry]]
##?
##? Options:
##?   -h --help                Show this help
##?   -v --version             Show the program version
##?   -p --pinentry            Force to use pintentry (uninstall gpg-suite or
##?                            gpg-suite-no-mail). Only in OSX.
##?   -g --gpg-suite           Force to use gpg-suite-no-mail (uninstall pinentry, if
##?                            you have installed gpg-suit will omit the install of
##?                            gpg-suite-no-mail). Only in OSX.
##?   -s --gpg-suite-pinentry  Use gpg-suite-pinentry
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.com>
##?
docs::parse "$@"

SCRIPT_NAME="dot gpg git"
SCRIPT_VERSION="1.0.0"

# Print name and version
if ${version:-}; then
  output::write "$SCRIPT_NAME v$SCRIPT_VERSION"
  exit
fi

# Here begin your script

if ! platform::is_macos; then
  output::error "This script is only for macOS"
  exit 1
fi

if ! platform::command_exists brew; then
  output::error "You need to install Homebrew \`dot package add brew\`"
  exit 1
fi

# Dependencies
script::depends_on gnupg git brew

# Variables
gnu_path="${gnupg_path:-$HOME/.gnupg}"
sec="$(sec::choose_sec)"

# Create gnupg path if not exists
[[ ! -d "${gnu_path}" ]] && mkdir -p "${gnu_path}" && chmod 0700 "${gnu_path}"
[[ ! -f "${gnu_path}/gpg-agent.conf" ]] && touch "${gnu_path}/gpg-agent.conf"

# Step 1: Configure git global config
output::empty_line
output::answer "‚öôÔ∏è Configuring git"
git config --global user.signingkey "$sec"
git config --global commit.gpgsign true
git config --global tag.gpgsign true
git config --global gpg.program "$(which gpg)"
output::solution "Git configured"
output::empty_line

# Step 2: Add public pgp key to GitHub
output::empty_line
output::answer "‚öôÔ∏è Now add your public key in you github settings"

if platform::command_exists pbcopy &&
  output::yesno "Do you want to copy the key to the clipboard"; then
  sec::gpg --armor --export "$sec" | "$DOTLY_PATH/bin/pbcopy" && output::solution "Public key is in your clipboard"
else
  output::empty_line
  sec::gpg --armor --export "$sec"
  output::empty_line
fi

if platform::command_exists open &&
  output::yesno "Do you want to open github settings to add your private GPG key"; then
  open "https://github.com/settings/gpg/new"
else
  output::write "üåç Open in browser and paste your key:"
  output::answer "https://github.com/settings/gpg/new"
  output::empty_line
  output::write "üîé In case of errors signing commits:"
  output::answer "https://github.com/gtrabanco/keybase-gpg-github#troubleshooting-gpg-failed-to-sign-the-data"
  output::empty_line
fi

# Step 3 (Optional): configure gpg to avoid asking pgp password every time (only macos)

# Exit if no macOS
! platform::is_macos && exit

# Exit if no brew
! platform::command_exists brew && exit

output::header "üçé Optional Configuration for macOS only"
if
  ! ${pinentry:-} &&
    ! ${gpg_suite:-} &&
    ! ${gpg_suite_pinentry:-} &&
    output::yesno "Do you want to setup gpg-suite or pinentry to avoid asking the gpg key password every time"
then
  pinentry=false
  gpg_suite=false
  gpg_suite_no_mail=false
  gpg_suite_pinentry=false

  PS3="Choose an option: "

  # macOS Monterey is not compatible with gpg-suite mail
  if [[ $(platform::macos_version_name) == "Monterey" ]]; then
    options=("gpg-suite-no-mail" "gpg-suite-pinentry" "pinentry" "Quit")
  else
    options=("gpg-suite-no-mail" "gpg-suite" "gpg-suite-pinentry" "pinentry" "Quit")
  fi

  select opt in "${options[@]}"; do
    case "$opt" in
    Quit)
      output::answer "User exit"
      exit
      ;;
    gpg-suite-no-mail)
      output::answer "gpg-suite-no-mail"
      gpg_suite_no_mail=true
      break
      ;;
    gpg-suite)
      output::answer "gpg-suite"
      gpg_suite=true
      break
      ;;
    gpg-suite-pinentry)
      output::answer "gpg-suite-pinentry"
      gpg_suite_pinentry=true
      break
      ;;
    pinentry)
      output::answer "pinentry"
      pinentry=true
      break
      ;;
    *)
      output::error "Unexpected value"
      exit 1
      ;;
    esac
  done
fi

if ${pinentry:-false}; then
  output::header "Pinentry configuration in process..."

  uninstall_gpg_suite_if_needed
  uninstall_gpg_suite_no_mail_if_needed
  uninstall_gpg_suite_pinentry_if_needed

  pinentry_config

  output::empty_line
  output::solution "Pinentry configuration finished"

elif ${gpg_suite:-false} || ${gpg_suite_no_mail:-false}; then
  output::header "GPG Suite configuration in process..."

  uninstall_pinentry_mac_if_needed
  uninstall_gpg_suite_pinentry_if_needed

  if ${gpg_suite:-false}; then
    package::install gpg-suite brew
  elif ${gpg_suite_no_mail:-false}; then
    package::install gpg-suite-no-mail brew
  fi

  gpg_suite_config
  gpgconf --kill all

  output::empty_line
  output::solution "GPG Suite configuration finished"

elif ${gpg_suite_pinentry:-false}; then
  output::header "GPG Suite pinentry configuration in process..."

  uninstall_gpg_suite_if_needed
  uninstall_gpg_suite_no_mail_if_needed
  uninstall_pinentry_mac_if_needed

  brew install --cask gpg-suite-pinentry
  #package::install gpg-suite-pinentry brew

  gpg_suite_pinentry

  output::empty_line
  output::solution "GPG Suite Pinentry configuration finished"

else
  output::error "No pinentry program have been selected"
fi
