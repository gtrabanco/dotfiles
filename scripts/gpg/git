#!/usr/bin/env bash

set -euo pipefail

[[ -z "${DOTLY_PATH:-$SLOTH_PATH}" ]] && exit 1

#shellcheck disable=SC1091
. "${DOTLY_PATH:-$SLOTH_PATH}/scripts/core/src/_main.sh"
dot::load_library "sec.sh"

if command -v brew &> /dev/null; then
  HOMEBREW_PREFIX="$(command brew --prefix)"
elif command -vp brew &> /dev/null; then
  HOMEBREW_PREFIX="$(command -p brew --prefix)"
elif [[ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
  HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
elif [[ -x "${HOME}/.linuxbrew/bin/brew" ]]; then
  HOMEBREW_PREFIX="${HOME}/.linuxbrew"
elif [[ -x "${HOME}/.homebrew/bin/brew" ]]; then
  HOMEBREW_PREFIX="${HOME}/.homebrew"
elif [[ -x "${HOME}/.brew/bin/brew" ]]; then
  HOMEBREW_PREFIX="${HOME}/.brew"
elif [[ -x "/opt/homebrew/bin/brew" ]]; then
  HOMEBREW_PREFIX="/opt/homebrew"
elif [[ -x "/usr/local/bin/brew" ]]; then
  HOMEBREW_PREFIX="/usr/local"
fi

pinentry_config() {
  script::depends_on pinentry-mac

  touch "$gnu_path/gpg-agent.conf"
  sec::sed -i '/^default-cache-ttl/d' "$gnu_path/gpg-agent.conf"
  sec::sed -i '/^max-cache-ttl/d' "$gnu_path/gpg-agent.conf"
  sec::sed -i '/^pinentry-program/d' "$gnu_path/gpg-agent.conf"
  echo "pinentry-program $(which pinentry-mac)" >> "$gnu_path/gpg-agent.conf"
}

gpg_suite_config() {
  if
    ! "${SLOT_PATH:-$DOTLY_PATH}/bin/dot" package check gpg-suite &> /dev/null
  then
    script::depends_on gpg-suite-no-mail
  fi

  touch "$gnu_path/gpg-agent.conf"
  if ! grep -q "^default-cache-ttl" "$gnu_path/gpg-agent.conf"; then
    echo "default-cache-ttl 600" >> "$gnu_path/gpg-agent.conf"
  fi

  if ! grep -q "^max-cache-ttl" "$gnu_path/gpg-agent.conf"; then
    echo "max-cache-ttl 7200" >> "$gnu_path/gpg-agent.conf"
  fi

  sec::sed -i '/^pinentry-program/d' "$gnu_path/gpg-agent.conf"

  output::write "Now the GPG Preferences will be opened and mark the options:"
  output::list "\`Store in macOS Keychain\`" "\`Remember for 600 seconds\`"
  open -b com.apple.systempreferences "/Library/PreferencePanes/GPGPreferences.prefPane"
}

# gpg_suite_pinentry() {
#   script::depends_on gpg-suite-pinentry

#   sec::sed -i '/^pinentry-program/d' "$gnu_path/gpg-agent.conf"
#   echo "pinentry-program ${HOMEBREW_PREFIX}/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac" | tee -a "$gnu_path/gpg-agent.conf"
# }

##? Configure git and github to sign commits
##?
##?
##? Usage:
##?   git [-h | --help]
##?   git [-v | --version]
##?   git [--gnupg-home <gnupg_path>] [[-p | --pinentry]|[-g | --gpg-suite]]
##?
##? Options:
##?   -h --help       Show this help
##?   -v --version    Show the program version
##?   -p --pinentry   Force to use pintentry (uninstall gpg-suite or
##?                   gpg-suite-no-mail). Only in OSX.
##?   -g --gpg-suite  Force to use gpg-suite-no-mail (uninstall pinentry, if
##?                   you have installed gpg-suit will omit the install of
##?                   gpg-suite-no-mail). Only in OSX.
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.com>
##?
docs::parse "$@"

SCRIPT_NAME="dot gpg git"
SCRIPT_VERSION="1.0.0"

# Print name and version
if ${version:-}; then
  output::write "$SCRIPT_NAME v$SCRIPT_VERSION"
  exit
fi

# Here begin your script

# Dependencies
script::depends_on gnupg git

# Variables
gnu_path="${gnupg_path:-$HOME/.gnupg}"
sec="$(sec::choose_sec)"

# Create gnupg path if not exists
[[ ! -d "$gnu_path" ]] && mkdir -p "$gnu_path" && chmod 0700 "$gnu_path"
[[ ! -f "$gnu_path/gpg-agent.conf" ]] && touch "$gnu_path/gpg-agent.conf"

# Step 1: Configure git global config
output::empty_line
output::answer "⚙️ Configuring git"
git config --global user.signingkey "$sec"
git config --global commit.gpgsign true
git config --global tag.gpgsign true
git config --global gpg.program "$(which gpg)"
output::solution "Git configured"
output::empty_line

# Step 2: Add public pgp key to GitHub
output::empty_line
output::answer "⚙️ Now add your public key in you github settings"

if platform::command_exists pbcopy &&
  output::yesno "Do you want to copy the key to the clipboard"; then
  sec::gpg --armor --export "$sec" | "$DOTLY_PATH/bin/pbcopy" && output::solution "Public key is in your clipboard"
else
  output::empty_line
  sec::gpg --armor --export "$sec"
  output::empty_line
fi

if platform::command_exists open &&
  output::yesno "Do you want to open github settings to add your private GPG key"
then
  open "https://github.com/settings/gpg/new"
else
  output::write "🌍 Open in browser and paste your key:"
  output::answer "https://github.com/settings/gpg/new"
  output::empty_line
  output::write "🔎 In case of errors signing commits:"
  output::answer "https://github.com/gtrabanco/keybase-gpg-github#troubleshooting-gpg-failed-to-sign-the-data"
  output::empty_line
fi

# Step 3 (Optional): configure gpg to avoid asking pgp password every time (only macos)

# Exit if no macOS
! platform::is_macos && exit

# Exit if no brew
! platform::command_exists brew && exit

output::header "🍎 Optional Configuration for macOS only"
if
  ! ${pinentry:-} &&
    ! ${gpg_suite:-} &&
    output::yesno "Do you want to setup gpg-suite or pinentry to avoid asking the gpg key password every time"
then
  pinentry=false
  gpg_suite=false
  gpg_suite_no_mail=false
  gpg_suite_pinentry=false

  PS3="Choose an option: "

  # macOS Monterey is not compatible with gpg-suite mail
  if [[ $(platform::macos_version_name) == "Monterey" ]]; then
    options=("gpg-suite-no-mail" "gpg-suite-pinentry" "pinentry" "Quit")
  else
    options=("gpg-suite-no-mail" "gpg-suite" "gpg-suite-pinentry" "pinentry" "Quit")
  fi

  select opt in "${options[@]}"; do
    case "$opt" in
      Quit)
        output::answer "User exit"
        exit
        ;;
      gpg-suite-no-mail)
        gpg_suite_no_mail=true
        break
        ;;
      gpg-suite)
        gpg_suite=true
        break
        ;;
      gpg-suite-pinentry)
        gpg_suite_pinentry=true
        ;;
      pinentry)
        pinentry=true
        break
        ;;
      *)
        output::error "Unexpected value"
        exit 1
        ;;
    esac
  done
fi

if ${pinentry:-false}; then
  output::answer "Pinentry configuration in process..."
  # if "${SLOT_PATH:-$DOTLY_PATH}/bin/dot" package check gpg-suite &> /dev/null; then
  #   brew uninstall gpg-suite
  # fi

  # if "${SLOT_PATH:-$DOTLY_PATH}/bin/dot" package check gpg-suite-no-mail &> /dev/null; then
  #   brew uninstall gpg-suite-no-mail
  # fi

  pinentry_config

  output::solution "Pinentry configuration finished"
fi

if ${gpg_suite:-false} || ${gpg_suite_no_mail:-false}; then
  output::answer "GPG Suite configuration in process..."
  # if "${SLOT_PATH:-$DOTLY_PATH}/bin/dot" package check pinentry-mac &> /dev/null; then
  #   package::uninstall pinentry-mac
  # fi

  if ${gpg_suite:-false}; then
    package::install gpg-suite brew
  elif ${gpg_suite_no_mail:-false}; then
    package::install gpg-suite-no-mail brew
  fi

  gpg_suite_config
  output::solution "GPG Suite configuration finished"
fi

# if ${gpg_suite_pinentry:-false}; then
#   # brew install --cask gpg-suite-pinentry
#   package::install gpg-suite-pinentry

#   gpg_suite_pinentry
# fi
